{
  "version": 3,
  "sources": ["../../react-use-draggable-scroll/src/useIsomorphicLayoutEffect.ts", "../../react-use-draggable-scroll/src/index.tsx"],
  "sourcesContent": ["import { useLayoutEffect, useEffect } from 'react';\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default useIsomorphicLayoutEffect;\n", "import { MutableRefObject, useEffect, useRef } from \"react\";\n\nimport useLayoutEffect from \"./useIsomorphicLayoutEffect\";\n\ntype OptionsType = {\n  decayRate?: number;\n  safeDisplacement?: number;\n  applyRubberBandEffect?: boolean;\n  activeMouseButton?: \"Left\" | \"Middle\" | \"Right\";\n  isMounted?: boolean;\n};\n\ntype ReturnType = {\n  events: {\n    onMouseDown: (e: React.MouseEvent<HTMLElement>) => void;\n  };\n};\n\nexport function useDraggable(\n  ref: MutableRefObject<HTMLElement>,\n  {\n    decayRate = 0.95,\n    safeDisplacement = 10,\n    applyRubberBandEffect = false,\n    activeMouseButton = \"Left\",\n    isMounted = true,\n  }: OptionsType = {}\n): ReturnType {\n  const internalState = useRef({\n    isMouseDown: false,\n    isDraggingX: false,\n    isDraggingY: false,\n    initialMouseX: 0,\n    initialMouseY: 0,\n    lastMouseX: 0,\n    lastMouseY: 0,\n    scrollSpeedX: 0,\n    scrollSpeedY: 0,\n    lastScrollX: 0,\n    lastScrollY: 0,\n  });\n\n  let isScrollableAlongX = false;\n  let isScrollableAlongY = false;\n  let maxHorizontalScroll = 0;\n  let maxVerticalScroll = 0;\n  let cursorStyleOfWrapperElement: string;\n  let cursorStyleOfChildElements: string[];\n  let transformStyleOfChildElements: string[];\n  let transitionStyleOfChildElements: string[];\n\n  const timing = (1 / 60) * 1000; // period of most monitors (60fps)\n\n  useLayoutEffect(() => {\n    if (isMounted) {\n      isScrollableAlongX =\n        window.getComputedStyle(ref.current).overflowX === \"scroll\";\n      isScrollableAlongY =\n        window.getComputedStyle(ref.current).overflowY === \"scroll\";\n\n      maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth;\n      maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight;\n\n      cursorStyleOfWrapperElement = window.getComputedStyle(ref.current).cursor;\n\n      cursorStyleOfChildElements = [];\n      transformStyleOfChildElements = [];\n      transitionStyleOfChildElements = [];\n\n      (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n        (child: HTMLElement) => {\n          cursorStyleOfChildElements.push(\n            window.getComputedStyle(child).cursor\n          );\n\n          transformStyleOfChildElements.push(\n            window.getComputedStyle(child).transform === \"none\"\n              ? \"\"\n              : window.getComputedStyle(child).transform\n          );\n\n          transitionStyleOfChildElements.push(\n            window.getComputedStyle(child).transition === \"none\"\n              ? \"\"\n              : window.getComputedStyle(child).transition\n          );\n        }\n      );\n    }\n  }, [isMounted]);\n\n  const runScroll = () => {\n    const dx = internalState.current.scrollSpeedX * timing;\n    const dy = internalState.current.scrollSpeedY * timing;\n    const offsetX = ref.current.scrollLeft + dx;\n    const offsetY = ref.current.scrollTop + dy;\n\n    ref.current.scrollLeft = offsetX; // eslint-disable-line no-param-reassign\n    ref.current.scrollTop = offsetY; // eslint-disable-line no-param-reassign\n    internalState.current.lastScrollX = offsetX;\n    internalState.current.lastScrollY = offsetY;\n  };\n\n  const rubberBandCallback = (e: MouseEvent) => {\n    const dx = e.clientX - internalState.current.initialMouseX;\n    const dy = e.clientY - internalState.current.initialMouseY;\n\n    const { clientWidth, clientHeight } = ref.current;\n\n    let displacementX = 0;\n    let displacementY = 0;\n\n    if (isScrollableAlongX && isScrollableAlongY) {\n      displacementX =\n        0.3 *\n        clientWidth *\n        Math.sign(dx) *\n        Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth);\n      displacementY =\n        0.3 *\n        clientHeight *\n        Math.sign(dy) *\n        Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight);\n    } else if (isScrollableAlongX) {\n      displacementX =\n        0.3 *\n        clientWidth *\n        Math.sign(dx) *\n        Math.log10(1.0 + (0.5 * Math.abs(dx)) / clientWidth);\n    } else if (isScrollableAlongY) {\n      displacementY =\n        0.3 *\n        clientHeight *\n        Math.sign(dy) *\n        Math.log10(1.0 + (0.5 * Math.abs(dy)) / clientHeight);\n    }\n\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement) => {\n        child.style.transform = `translate3d(${displacementX}px, ${displacementY}px, 0px)`; // eslint-disable-line no-param-reassign\n        child.style.transition = \"transform 0ms\"; // eslint-disable-line no-param-reassign\n      }\n    );\n  };\n\n  const recoverChildStyle = () => {\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement, i) => {\n        child.style.transform = transformStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n        child.style.transition = transitionStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n      }\n    );\n  };\n\n  let rubberBandAnimationTimer: NodeJS.Timeout;\n  let keepMovingX: NodeJS.Timer;\n  let keepMovingY: NodeJS.Timer;\n\n  const callbackMomentum = () => {\n    const minimumSpeedToTriggerMomentum = 0.05;\n\n    keepMovingX = setInterval(() => {\n      const lastScrollSpeedX = internalState.current.scrollSpeedX;\n      const newScrollSpeedX = lastScrollSpeedX * decayRate;\n      internalState.current.scrollSpeedX = newScrollSpeedX;\n\n      const isAtLeft = ref.current.scrollLeft <= 0;\n      const isAtRight = ref.current.scrollLeft >= maxHorizontalScroll;\n      const hasReachedHorizontalEdges = isAtLeft || isAtRight;\n\n      runScroll();\n\n      if (\n        Math.abs(newScrollSpeedX) < minimumSpeedToTriggerMomentum ||\n        internalState.current.isMouseDown ||\n        hasReachedHorizontalEdges\n      ) {\n        internalState.current.scrollSpeedX = 0;\n        clearInterval(keepMovingX);\n      }\n    }, timing);\n\n    keepMovingY = setInterval(() => {\n      const lastScrollSpeedY = internalState.current.scrollSpeedY;\n      const newScrollSpeedY = lastScrollSpeedY * decayRate;\n      internalState.current.scrollSpeedY = newScrollSpeedY;\n\n      const isAtTop = ref.current.scrollTop <= 0;\n      const isAtBottom = ref.current.scrollTop >= maxVerticalScroll;\n      const hasReachedVerticalEdges = isAtTop || isAtBottom;\n\n      runScroll();\n\n      if (\n        Math.abs(newScrollSpeedY) < minimumSpeedToTriggerMomentum ||\n        internalState.current.isMouseDown ||\n        hasReachedVerticalEdges\n      ) {\n        internalState.current.scrollSpeedY = 0;\n        clearInterval(keepMovingY);\n      }\n    }, timing);\n\n    internalState.current.isDraggingX = false;\n    internalState.current.isDraggingY = false;\n\n    if (applyRubberBandEffect) {\n      const transitionDurationInMilliseconds = 250;\n\n      (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n        (child: HTMLElement) => {\n          child.style.transform = `translate3d(0px, 0px, 0px)`; // eslint-disable-line no-param-reassign\n          child.style.transition = `transform ${transitionDurationInMilliseconds}ms`; // eslint-disable-line no-param-reassign\n        }\n      );\n\n      rubberBandAnimationTimer = setTimeout(\n        recoverChildStyle,\n        transitionDurationInMilliseconds\n      );\n    }\n  };\n\n  const preventClick = (e: Event) => {\n    e.preventDefault();\n    e.stopImmediatePropagation();\n    // e.stopPropagation();\n  };\n\n  const getIsMousePressActive = (buttonsCode: number) => {\n    return (\n      (activeMouseButton === \"Left\" && buttonsCode === 1) ||\n      (activeMouseButton === \"Middle\" && buttonsCode === 4) ||\n      (activeMouseButton === \"Right\" && buttonsCode === 2)\n    );\n  };\n\n  const onMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    const isMouseActive = getIsMousePressActive(e.buttons);\n    if (!isMouseActive) {\n      return;\n    }\n\n    internalState.current.isMouseDown = true;\n    internalState.current.lastMouseX = e.clientX;\n    internalState.current.lastMouseY = e.clientY;\n    internalState.current.initialMouseX = e.clientX;\n    internalState.current.initialMouseY = e.clientY;\n  };\n\n  const onMouseUp = (e: MouseEvent) => {\n    const isDragging =\n      internalState.current.isDraggingX || internalState.current.isDraggingY;\n\n    const dx = internalState.current.initialMouseX - e.clientX;\n    const dy = internalState.current.initialMouseY - e.clientY;\n\n    const isMotionIntentional =\n      Math.abs(dx) > safeDisplacement || Math.abs(dy) > safeDisplacement;\n\n    const isDraggingConfirmed = isDragging && isMotionIntentional;\n\n    if (isDraggingConfirmed) {\n      ref.current.childNodes.forEach((child) => {\n        child.addEventListener(\"click\", preventClick);\n      });\n    } else {\n      ref.current.childNodes.forEach((child) => {\n        child.removeEventListener(\"click\", preventClick);\n      });\n    }\n\n    internalState.current.isMouseDown = false;\n    internalState.current.lastMouseX = 0;\n    internalState.current.lastMouseY = 0;\n\n    ref.current.style.cursor = cursorStyleOfWrapperElement; // eslint-disable-line no-param-reassign\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement, i) => {\n        child.style.cursor = cursorStyleOfChildElements[i]; // eslint-disable-line no-param-reassign\n      }\n    );\n\n    if (isDraggingConfirmed) {\n      callbackMomentum();\n    }\n  };\n\n  const onMouseMove = (e: MouseEvent) => {\n    if (!internalState.current.isMouseDown) {\n      return;\n    }\n\n    e.preventDefault();\n\n    const dx = internalState.current.lastMouseX - e.clientX;\n    internalState.current.lastMouseX = e.clientX;\n\n    internalState.current.scrollSpeedX = dx / timing;\n    internalState.current.isDraggingX = true;\n\n    const dy = internalState.current.lastMouseY - e.clientY;\n    internalState.current.lastMouseY = e.clientY;\n\n    internalState.current.scrollSpeedY = dy / timing;\n    internalState.current.isDraggingY = true;\n\n    ref.current.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n    (ref.current.childNodes as NodeListOf<HTMLOptionElement>).forEach(\n      (child: HTMLElement) => {\n        child.style.cursor = \"grabbing\"; // eslint-disable-line no-param-reassign\n      }\n    );\n\n    const isAtLeft = ref.current.scrollLeft <= 0 && isScrollableAlongX;\n    const isAtRight =\n      ref.current.scrollLeft >= maxHorizontalScroll && isScrollableAlongX;\n    const isAtTop = ref.current.scrollTop <= 0 && isScrollableAlongY;\n    const isAtBottom =\n      ref.current.scrollTop >= maxVerticalScroll && isScrollableAlongY;\n    const isAtAnEdge = isAtLeft || isAtRight || isAtTop || isAtBottom;\n\n    if (isAtAnEdge && applyRubberBandEffect) {\n      rubberBandCallback(e);\n    }\n\n    runScroll();\n  };\n\n  const handleResize = () => {\n    maxHorizontalScroll = ref.current.scrollWidth - ref.current.clientWidth;\n    maxVerticalScroll = ref.current.scrollHeight - ref.current.clientHeight;\n  };\n\n  useEffect(() => {\n    if (isMounted) {\n      window.addEventListener(\"mouseup\", onMouseUp);\n      window.addEventListener(\"mousemove\", onMouseMove);\n      window.addEventListener(\"resize\", handleResize);\n    }\n    return () => {\n      window.removeEventListener(\"mouseup\", onMouseUp);\n      window.removeEventListener(\"mousemove\", onMouseMove);\n      window.removeEventListener(\"resize\", handleResize);\n\n      clearInterval(keepMovingX);\n      clearInterval(keepMovingY);\n      clearTimeout(rubberBandAnimationTimer);\n    };\n  }, [isMounted]);\n\n  return {\n    events: {\n      onMouseDown,\n    },\n  };\n}\n"],
  "mappings": "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",
  "names": ["useIsomorphicLayoutEffect", "window", "useLayoutEffect", "useEffect", "useDraggable", "ref", "decayRate", "safeDisplacement", "applyRubberBandEffect", "activeMouseButton", "isMounted", "internalState", "useRef", "isMouseDown", "isDraggingX", "isDraggingY", "initialMouseX", "initialMouseY", "lastMouseX", "lastMouseY", "scrollSpeedX", "scrollSpeedY", "lastScrollX", "lastScrollY", "isScrollableAlongX", "isScrollableAlongY", "maxHorizontalScroll", "maxVerticalScroll", "cursorStyleOfWrapperElement", "cursorStyleOfChildElements", "transformStyleOfChildElements", "transitionStyleOfChildElements", "timing", "getComputedStyle", "current", "overflowX", "overflowY", "scrollWidth", "clientWidth", "scrollHeight", "clientHeight", "cursor", "childNodes", "forEach", "child", "push", "transform", "transition", "runScroll", "dx", "dy", "offsetX", "scrollLeft", "offsetY", "scrollTop", "rubberBandCallback", "e", "clientX", "clientY", "displacementX", "displacementY", "Math", "sign", "log10", "abs", "style", "recoverChildStyle", "i", "rubberBandAnimationTimer", "keepMovingX", "keepMovingY", "callbackMomentum", "minimumSpeedToTriggerMomentum", "setInterval", "lastScrollSpeedX", "newScrollSpeedX", "isAtLeft", "isAtRight", "hasReachedHorizontalEdges", "clearInterval", "lastScrollSpeedY", "newScrollSpeedY", "isAtTop", "isAtBottom", "hasReachedVerticalEdges", "transitionDurationInMilliseconds", "setTimeout", "preventClick", "preventDefault", "stopImmediatePropagation", "getIsMousePressActive", "buttonsCode", "onMouseDown", "isMouseActive", "buttons", "onMouseUp", "isDragging", "isMotionIntentional", "isDraggingConfirmed", "addEventListener", "removeEventListener", "onMouseMove", "isAtAnEdge", "handleResize", "clearTimeout", "events"]
}
